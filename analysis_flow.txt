Analysis program flow


--------------------------------------- Step 1 -> Lancia una specie di MakeClass per quel file root

./scripts/make_rootNtupleClass.sh –f file.root –f nomeTree

ESEMPIO:
./scripts/make_rootNtupleClass.sh –f /tmp/fpreiato/RSGravitonToQuarkQuark_kMpl01_M_1000_Tune4C_13TeV_pythia8__Phys14DR-PU20bx25_PHYS14_25_V1-v1__MINIAODSIM_10_1_t8g.root -t dijets/events

rispondi si (y) ad entrambe le domande

--------------------------------------- Step 2 -> linka questi programmi 

ln -sf analysisClass_mainDijetSelection.C src/analysisClass.C

------------------------------------- Step 3:

Make clean

Make all

--------------------------------------- Step 4 -> Scrivi il nome del file root nel file di testo inputListJets.txt

ESEMPIO:
echo "/tmp/fpreiato/RSGravitonToQuarkQuark_kMpl01_M_1000_Tune4C_13TeV_pythia8__Phys14DR-PU20bx25_PHYS14_25_V1-v1__MINIAODSIM_10_1_t8g.root" > ! config/inputListJets.txt

---------------------------------- Step 5 -> Lancia il programma di analisi /.main

./main config/inputListJets.txt config/cutFile_mainDijetSelection.txt dijets/events output/rootFile output/cutEfficiencyFile


Se inserisci nuove variabili da salvare devi modificare anche il config/cutFile_mainDijetSelection.txt


----------   Per compilare i tuoi programmi facili invece

g++ -o programma.exe programma.cc `root-config --cflags  --glibs`

+++++++++++++++++++++++++++++++++++++++++++++

Posso lanciare i job su una lista di file (tutti appartenenti allo stesso sample)

--------------------------------------------------------- 1) Per creare la lista  -> Dalla cartella DijetRootTreeAnalyzer 

python createList_T2.py –i path/cartella_input –o /path/cartella_output

ESEMPIO:
python createList_T2.py -i /pnfs/roma1.infn.it/data/cms/store/user/santanas/qqRSGqq_PU20bx25_Tag626513a_20141225_124228/ -o /cmshome/fpreiato/DiJet/test/CMSSW_7_2_1_DiJet/src/CMSDIJET/DijetRootTreeAnalyzer/config/lists

----------------------------------------------------------- 2) Per girare il programma in bash su questa lista

python scripts/submit_batch_T2.py -i config/lists/ -o output/

config/lists/ -> cartella dove ho fatto la mia lista 

output/ -> cartella dove voglio gli output del programma che sono:

CREA:
rootFile_ per ogni campione di massa . root
rootFile reduced skim per ogni campione di massa .root
cutEfficiencyFile per ogni campione di massa .root

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

------------------------------------------------------------ Per Creare una ntupla

Nella cartella DijetRootMaker

------------------------ 1) per modificare le variabili dei Tree modifica il file 

/prod/flat-signal-cfg_miniAOD.py


  ---  Ha bisogno di un root file in input -> cambia nome in -> PoolSource ( fileNames = cms.untracked.vstring('file:9EE6AF6D-766F-E411-AE11-0026189437FD.root') )
  --- Cambia il nome del file root di output -> THISROOTFILE ( fileName=cms.string('dijetTree_RSGravitonToQuarkQuark_M3000.root'), )
  --- Cambia nome del global tag -> THISGLOBALTAG ( process.GlobalTag.globaltag = 'PHYS14_25_V2::All' )

il file 9EE6AF6D-766F-E411-AE11-0026189437FD.root va copiato con/da

dccp /pnfs/roma1.infn.it/data/cms/store/mc/Phys14DR/QstarToJJ_M_3000_Tune4C_13TeV_pythia8/MINIAODSIM/PU20bx25_PHYS14_25_V1-v1/10000/6EF79FD0-F06B-E411-B733-BCAEC50971E2.root


  ---Numero di eventi che si vogliono generare:

  process.maxEvents = cms.untracked.PSet(input = cms.untracked.int32(10000))

---------------------- 2) compila dalla cartella DijetRootMaker

> scram b

--------------------- 3) Lancia dalla cartella prod/

cmsRun flat-signa-cfg_miniAOD.py

-> crea il file output.root con tutte le variabili dentro
